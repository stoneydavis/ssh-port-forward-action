name: 'SSH port forwarding action'
description: 'Forward a connection over SSH in the background'

branding:
  icon: 'corner-up-right'
  color: 'red'

inputs:
  ssh-key:
    description: 'SSH private key'
    required: true
  ssh-host:
    description: 'SSH host'
    required: true
  ssh-port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh-user:
    description: 'SSH user'
    required: true
  remote-host:
    description: 'Remote host'
    required: true
  remote-port:
    description: 'Remote port'
    required: true
  local-port:
    description: 'Local port'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Write SSH key to file
      uses: 'actions/github-script@v7.0.1'
      with:
        script: |
          const {writeFileSync} = require('fs');
          const {join} = require('path');
          
          try {
            const key = core.getInput('ssh-key');
            if (!key || key.length === 0) {
              throw new Error('SSH key is empty');
            }
            writeFileSync('user_key', key, { encoding: 'utf8', mode: 0o400 });
          } catch (error) {
            core.setFailed(error.message);
          }

    - name: Validate SSH key
      shell: bash
      run: |
        file user_key
        ssh-keygen -y -e -f user_key

    - name: Start SSH port forwarding
      shell: bash
      run: |       
        # Start SSH forwarder
        ssh -i user_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -N -L ${{ inputs.local-port }}:${{ inputs.remote-host }}:${{ inputs.remote-port }} -p ${{ inputs.ssh-port }} ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} &

        # wait until connections are accepted
        sleep 3
        isready=0
        for i in {1..10}; do
          echo "Wait for connections to be ready ... $i/10"
          (${{ github.action_path }}/wait-for-it.sh --quiet --timeout=3 --host=127.0.0.1 --port=${{ inputs.local-port }} || exit $?) && true # escape bash's pipefail
          isready=$?
          if [[ $isready -eq 0 ]]; then
            break
          fi
          sleep 2
        done

        # exit with error code if we couldn't connect
        if [[ $isready -ne 0 ]]; then
          exit $isready 
        fi
