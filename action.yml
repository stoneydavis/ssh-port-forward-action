name: 'Port Forwarding with SSH'
description: 'Forward a connection over SSH in the background'

branding:
  icon: 'corner-up-right'
  color: 'red'

inputs:
  ssh_key:
    description: 'SSH private key'
    required: true
  ssh_host:
    description: 'SSH host'
    required: true
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh_user:
    description: 'SSH user'
    required: true
  remote_host:
    description: 'Remote host'
    required: true
  remote_port:
    description: 'Remote port'
    required: true
  local_port:
    description: 'Local port'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Check size of provided key
      shell: bash
      run: |
        echo "${{ inputs.ssh_key }}" > user_key;
        chmod 0400 user_key;

    - name: Validate SSH key
      shell: bash
      run: |
        file user_key
        ssh-keygen -y -e -f user_key

    - name: Start SSH port forwarding
      shell: bash
      run: |       
        # Start SSH forwarder
        ssh -i user_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -N -L ${{ inputs.local_port }}:${{ inputs.remote_host }}:${{ inputs.remote_port }} -p ${{ inputs.ssh_port }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} &

        # wait until connections are accepted
        sleep 3
        isready=0
        for i in {1..10}; do
          echo "Wait for connections to be ready ... $i/10"
          (${{ github.action_path }}/wait-for-it.sh --quiet --timeout=3 --host=127.0.0.1 --port=${{ inputs.local_port }} || exit $?) && true # escape bash's pipefail
          isready=$?
          if [[ $isready -eq 0 ]]; then
            break
          fi
          sleep 2
        done

        # exit with error code if we couldn't connect
        if [[ $isready -ne 0 ]]; then
          exit $isready 
        fi
